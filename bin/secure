#!/usr/bin/env python

import sys
import hashlib
import getpass

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

def make_encryption_key(password):
    return hashlib.sha256(password).digest()

def encrypt(key, data):
    encryptor = AES.new(key, mode=AES.MODE_CBC)
    return encryptor.iv + encryptor.encrypt(pad(data, AES.block_size))

def decrypt(key, ciphertext):
    iv, ciphertext = ciphertext[:16], ciphertext[16:]
    decryptor = AES.new(key, mode=AES.MODE_CBC, iv=iv)
    plain = decryptor.decrypt(ciphertext)
    return unpad(plain, AES.block_size)

USAGE = "usage: secure (lock|unlock) [file]"

def exit_with_usage(usage=USAGE):
    print(usage, file=sys.stderr)
    sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        exit_with_usage()

    password = getpass.getpass("password? ").encode("ascii")
    key = make_encryption_key(password)

    action = sys.argv[1]

    if len(sys.argv) > 2:
        fp = open(sys.argv[2], 'rb')
    else:
        fp = sys.stdin.buffer

    if action == "lock":
        with fp:
            text = fp.read()
        sys.stdout.buffer.write(encrypt(key, text))
    elif action == "unlock":
        with fp:
            ciphertext = fp.read()
        plain = decrypt(key, ciphertext)
        sys.stdout.write(plain.decode("utf-8"))
    else:
        exit_with_usage()
