" The "m" at the end of Vi
set nocompatible

" Plugin setup
source $HOME/.vim/plugins.vim

" Leader is "<space>"
let mapleader = "\<space>"

" Sets how many lines of history Vim has to remember
set history=1000

" Reload buffer when its file is changed from the outside
set autoread

" Set UTF8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set fileformats=unix,dos,mac

" Disable backup/swap
set nobackup
set nowritebackup
set noswapfile

" Add "$" at end of "change" nouns
set cpoptions+=$

" Remove startup message
set shortmess+=I

" Don't redraw while executing macros (good performance config)
set lazyredraw

" ---------------------------------------------------------------- }}}

" Vim user interface --------------------------------------------- {{{

" Title is name of current file
set title

" Set amount of lines above the cursor
set scrolloff=3

" Show line numbers
set number

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" Always put a status line in, even if there is only one window
set laststatus=2

" Status line (if Fugitive, with Git extra)
silent! call fugitive#statusline()
set statusline=%F%m\ [%{&ff}]%y%r
set statusline+=%{exists('*fugitive#statusline')?fugitive#statusline():''}
set statusline+=[%l,%v][%p%%][\%03.b]

" Turn on the Wild menu
set wildmenu

" Behave shell-like when completing shell
set wildmode=longest,list

" Ignore compiled files and backups
set wildignore=*.o,*~,*.pyc,*.gch

" Virtual edit
set virtualedit=
set whichwrap+=<,>,h,l " disabled when virtualedit

" Backspace unindents and joins lines
set backspace=start,indent,eol

" Don't notify any errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Hide the mouse pointer while typing
set mousehide

" ---------------------------------------------------------------- }}}

" Syntax related ------------------------------------------------- {{{

" Enable syntax highlighting
syntax enable

" Enable modeline
set modeline

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set matchtime=2

" Default fold method
set foldmethod=indent

" Max number of fold levels
set foldnestmax=10

" Folding everything (disable at start)
set nofoldenable

" Again, folding parent levels
set foldlevel=1

" Tags (go up directories and collect "tags" files)
set tags=./tags;/

" Default complete function
set omnifunc=syntaxcomplete#Complete

" Complete menu
set completeopt=menuone,preview

" Add "/usr/local/include" to path when running Unix
if has("unix")
    set path+=/usr/local/include
endif

" ---------------------------------------------------------------- }}}

" Text, tab and indent related ----------------------------------- {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Indent by 4 spaces/tabs
set shiftwidth=4
set softtabstop=4
set tabstop=4

" Invisible characters
set list listchars=tab:>-,trail:.,extends:>

" Explicit FTW
set autoindent
set smartindent
set wrap

" ---------------------------------------------------------------- }}}

" Searching ------------------------------------------------------ {{{

" Regex magic
set magic

" Ignore case
set ignorecase

" Try to be smart about cases
set smartcase

" Highlight results (but don't show immediately)
set hlsearch
nohlsearch

" Makes search act like in modern browsers
set incsearch

" ---------------------------------------------------------------- }}}

" Colors and Fonts ----------------------------------------------- {{{

" Colorscheme should use 256 colors
set t_Co=256
" and should be a dark background
set background=dark

" In terminal, the "escape" also acts as Ctrl-C
let g:CommandTCancelMap = ["<esc>", "<C-c>"]

" ---------------------------------------------------------------- }}}

" Moving around -------------------------------------------------- {{{

" A buffer becomes hidden when it is abandoned
set hidden

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab

" Tab display
set showtabline=0

" Split towards the right
set splitright

" ---------------------------------------------------------------- }}}

" Keymappings ---------------------------------------------------- {{{

" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

" Disable search highlighting
nmap <silent> <leader><cr> :nohlsearch<cr>

" Search-replace current word
"nmap <leader>s :%s/\v<<C-r><C-w>>//gI<left><left><left>

" Remap Vim 0 to first non-blank character
nmap 0 ^

" Quick indenting in normal node
nmap <tab> ==

" Exchange "`" and "'"
nnoremap ' `
nnoremap ` '

" Resolve inconsistency between "Y" (line), and "D" (eol)
"nmap D dd
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Select pasted text with gV
nmap gV `[v`]

" Replace current word
nmap <leader>r :%s/<C-r><C-w>//gc<left><left><left>

" Fast saving
nmap <silent> <leader>w :write<cr>

" Close current window
nmap <silent> <leader>q :quit<cr>

" Run "make" (makeprg or compiler)
nmap <silent> <leader>m :make<cr>

" Cd to current file
nmap <silent> <leader>cd :cd %:p:h<cr>

" In command mode, insert "%:p:h" when typing %% (very useful)
cnoremap %% <C-r>=expand("%:p:h")."/"<cr>

" ---------------------------------------------------------------- }}}

" Autocommands --------------------------------------------------- {{{

augroup vimrc_autocommands
    " Remove all previous autocommands from this group
    autocmd!

    " Return to last edit position when opening files
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \     execute "normal! g`\"" |
                \ endif

    " Vimrc
    autocmd BufNewFile,BufRead,BufEnter *vimrc setlocal foldmethod=marker
augroup END

" LaTeX-specification
let g:tex_flavor = "latex"

" ---------------------------------------------------------------- }}}
