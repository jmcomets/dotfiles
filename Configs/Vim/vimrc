""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Author:
"       Jean-Marie Comets
"
" Version:
"       1.5 - 09/09/2012 (21:33)
"
" Sections:
"   - General
"   - VIM user interface
"   - Files and backups
"   - Text, tab and indent related
"   - Plugin settings
"   - Colors and Fonts
"   - Moving around, tabs and buffers
"   - Editing mappings
"   - Spell checking
"   - Various key remaps
"   - Misc
"   - Helper functions
"   - Filetype settings
"   - Plugin customization
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

" Remove Vim's startup message (sorry...)
set shortmess+=I

" Set mapleader (shortcut key) to ","
let mapleader = ","
let g:mapleader = ","

" Fast saving
nnoremap <leader>w :w!<cr>
"imap <C-s> <c-o><leader>w<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j / k
set so=7

" Turn on the WiLd menu
set wmnu

" Behave shell-like when completing shell
set wildmode=longest,list

" Ignore compiled files and backups
set wildignore=*.o,*~,*.pyc,*.gch

" Compatible options
set cpo+=$

" Show line numbers
set number

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Center screen at cursor when searching
nnoremap n nzz
nnoremap } }zz

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" Fold settings
set fdm=syntax

" Default completing function
set ofu=syntaxcomplete#Complete

" Max number of fold levels
set foldnestmax=10

" Folding everything
set nofoldenable

" Again, folding parent levels
set foldlevel=1

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set et

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set sw=4
set ts=4

" Linebreak on 100 characters
set lbr
set tw=100

" Virtual edit (awesome)
set ve=all

" Auto indent
set ai

" Smart indent
set si

" Wrap lines
set wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable filetype plugins
filetype plugin indent on

" Start Pathogen plugin to load bundle
call pathogen#infect()
call pathogen#helptags()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" Dark backgrounds are better
set background=dark

" Colorschemes
if (has("gui_running"))
    colorscheme wombat
else
    colorscheme mustang
endif

" Editing font
"set gfn=Consolas\ 12

" Set extra options when running in GUI mode
if has("gui_running")
    set go-=r
    set go-=l
    set go-=m
    set go-=T
    set go+=e
    set t_Co=256
    set gtl=%M\ %t
endif

" Configure for terminal
if &term =~ "xterm"
    if has("terminfo")
        let g:CommandTCancelMap=['<ESC>','<C-c>']
        set t_Co=256
        set t_Sf=<Esc>[3%p1%dm
        set t_Sb=<Esc>[4%p1%dm
    else
        set t_Co=8
        set t_Sf=<Esc>[3%dm
        set t_Sb=<Esc>[4%dm
    endif
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

" Map <Spaceto / (search) and Ctrl-<Spaceto ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>

" Switch tabs quickly
map <C-S-tab> :tabprevious<cr>
map <C-tab> :tabnext<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

if has("autocmd")
    " Delete trailing white-space on save
    autocmd BufWritePre * :%s/\s\+$//e

    " Return to last edit position when opening files
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
endif

" Remember info about open buffers on close
"set viminfo^=%

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move a line of text using ALT+[jk]
nnoremap <M-j> :m .+1<cr>==
nnoremap <M-k> :m .-2<cr>==
inoremap <M-j> <Esc>:m .+1<cr>==gi
inoremap <M-k> <Esc>:m .-2<cr>==gi
vnoremap <M-j> :m '>+1<cr>gv=gv
vnoremap <M-k> :m '<-2<cr>gv=gv

" Quick search-replace
nnoremap <leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Various key remaps
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

" Exchange "`" and "'"
nnoremap ' `
nnoremap ` '

" Map ";" to ":" (avoid typos)
noremap ; :

" Map "²" to "~" (quicker), and don't go forward one character
nmap ² ~h

" Solve inconsistency between "Y" (yanks line) and "D" (deletes til end of line)
"nmap D dd
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Disable arrow keys (comment out when better at Vim ^^)
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows "^M"
nmap <leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Close current file
nmap <leader>q :q<cr>

" Run "ls" in CWD
nmap <leader>ls :!ls<cr>

" Edit / Source configuration
nmap <leader>co :e $MYVIMRC<cr>
nmap <leader>so :so $MYVIMRC<cr>

" Toggle paste mode on and off
nmap <leader>pp :setlocal paste!<cr>

" Quick make command
map <F8> :make<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
    finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
    let bclose_multiple = 1
endif

" Display an error message.
function! s:Warn(msg)
    echohl ErrorMsg
    echomsg a:msg
    echohl NONE
endfunction

" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
    if empty(a:buffer)
        let btarget = bufnr('%')
    elseif a:buffer =~ '^\d\+$'
        let btarget = bufnr(str2nr(a:buffer))
    else
        let btarget = bufnr(a:buffer)
    endif
    if btarget < 0
        call s:Warn('No matching buffer for '.a:buffer)
        return
    endif
    if empty(a:bang) && getbufvar(btarget, '&modified')
        call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
        return
    endif
    " Numbers of windows that view target buffer which we will delete.
    let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
    if !g:bclose_multiple && len(wnums) > 1
        call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
        return
    endif
    let wcurrent = winnr()
    for w in wnums
        execute w.'wincmd w'
        let prevbuf = bufnr('#')
        if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
            buffer #
        else
            bprevious
        endif
        if btarget == bufnr('%')
            " Numbers of listed buffers which are not the target to be deleted.
            let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
            " Listed, not target, and not displayed.
            let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
            " Take the first buffer, if any (could be more intelligent).
            let bjump = (bhidden + blisted + [-1])[0]
            if bjump > 0
                execute 'buffer '.bjump
            else
                execute 'enew'.a:bang
            endif
        endif
    endfor
    execute 'bdelete'.a:bang.' '.btarget
    execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call s:Bclose('<bang>', '<args>')
nnoremap <silent> <leader>bd :Bclose!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FileType settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
    " Makefile
    autocmd FileType make setl noet

    " C / C++
    autocmd BufNewFile,BufRead,BufEnter *.h,*.c,*.cpp,*.hpp setl ofu=omni#cpp#complete#Main
    autocmd BufNewFile,BufRead,BufEnter *.h,*.cpp,*.hpp setl ft=cpp
    autocmd BufNewFile,BufRead,BufEnter *.c setl ft=c

    " XML
    let xml_syntax_folding=1

    " JSON / JavaScript
    autocmd BufNewFile,BufRead *.json set ft=javascript

    " Pascal
    autocmd BufNewFile,BufRead *.pas,*.PAS set ft=pascal
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin customization
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TagList
let Tlist_Enable_Fold_Column = 0
let Tlist_Compact_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Use_Right_Window = 1
nmap <F4> :TlistToggle<cr>
imap <F4> <C-o>:TlistToggle<cr>

" Powerline
set laststatus=2
set gfn=DejaVu\ Sans\ Mono\ for\ Powerline\ 11
let g:Powerline_symbols = 'fancy'

" NerdTree
map <silent> <F3> :NERDTreeToggle<cr>
imap <silent> <F3> <C-o><F3><cr>

" Fugitive
nmap <leader>gs :Gstatus<cr>
nmap <leader>gd :Gdiff<cr>
nmap <leader>gl :Glog<cr>
nmap <leader>gc :Gcommit<cr>
nmap <leader>gw :Gwrite<cr>

" Fswitch
nmap <silent> <leader>of :FSHere<cr>
nmap <silent> <leader>ol :FSRight<cr>
nmap <silent> <leader>oL :FSSplitRight<cr>
nmap <silent> <leader>oh :FSLeft<cr>
nmap <silent> <leader>oH :FSSplitLeft<cr>
nmap <silent> <leader>ok :FSAbove<cr>
nmap <silent> <leader>oK :FSSplitAbove<cr>
nmap <silent> <leader>oj :FSBelow<cr>
nmap <silent> <leader>oJ :FSSplitBelow<cr>

" Ctag locations
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/gl
set tags+=~/.vim/tags/sdl
set tags+=~/.vim/tags/qt4

" Build Ctags with Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<cr>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]

" Automatically open and close the popup menu / preview window
autocmd CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" ZoomWin
nmap <leader><leader> :ZoomWin<cr>
