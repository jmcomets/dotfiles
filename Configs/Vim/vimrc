" Summary -------------------------------------------------------- {{{
"
" Author: Jean-Marie Comets <jean.marie.comets@gmail.com>
"
" Version: 2.6 (2013 June 2)
"
" Sections:
"   - Preamble
"   - Vim user interface
"   - Syntax related
"   - Text, tab and indent related
"   - Colors and Fonts
"   - Moving around
"   - Searching
"   - Keymappings
"   - Filetype settings
"   - Plugin customization
"
" ---------------------------------------------------------------- }}}

" Preamble ------------------------------------------------------- {{{

" Sets how many lines of history Vim has to remember
set history=700

" Set to auto read when a file is changed from the outside
set autoread

" Vim startup message
set shortmess+=I

" Set mapleader (shortcut key) to ","
let mapleader = ","
let g:mapleader = ","

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in svn / git anyway...
set nobackup
set nowritebackup
set noswapfile

" Start Pathogen plugin to load bundle
call pathogen#infect()
call pathogen#helptags()

" Enable filetype plugins
filetype plugin indent on

" ---------------------------------------------------------------- }}}

" Vim user interface --------------------------------------------- {{{

" Compatible options
set cpoptions+=$

" Title is name of current file
set title

" Set 5 lines to the cursor - when moving vertically using j / k
set scrolloff=5

" Turn on the WiLd menu
set wildmenu

" Behave shell-like when completing shell
set wildmode=longest,list

" Ignore compiled files and backups
set wildignore=*.o,*~,*.pyc,*.gch

" Only show line numbers in GUI mode
set number

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
"set whichwrap+=<,>,h,l

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Hide the mouse pointer while typing
set mousehide

" Mouse activated ?
set mouse=

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Fix for terminal enabling ALT key mappings
if !has("gui_running")
    let s:c = "a"
    while s:c <= "z"
      execute "set <A-" . s:c . ">=\e" . s:c
      execute "imap \e" . s:c . " <A-" . s:c . ">"
      let s:c = nr2char(1 + char2nr(s:c))
    endwhile
    set timeout ttimeoutlen=50
endif

set path+=/usr/local/include

" ---------------------------------------------------------------- }}}

" Syntax related ------------------------------------------------- {{{

" Enable syntax highlighting
syntax enable

" Show matching brackets when text indicator is over them
set showmatch

" Fold settings
set foldmethod=indent

" Max number of fold levels
set foldnestmax=10

" Folding everything
set nofoldenable

" Again, folding parent levels
set foldlevel=1

" How many tenths of a second to blink when matching brackets
set matchtime=2

" Enable modeline
set modeline

" For regular expressions turn magic on
set magic

" Completing function
set omnifunc=syntaxcomplete#Complete

" Tags
set tags=./tags;/

" Complete menu
set completeopt=menuone,preview

" Always put a status line in, even if there is only one window
set laststatus=2

" Status line with Git extra
set statusline=%F%m\ [%{&ff}]%y%r%{fugitive#statusline()}[%l,%v][%p%%][\%03.b]

" ---------------------------------------------------------------- }}}

" Text, tab and indent related ----------------------------------- {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Indent by 4 spaces, 8 for tabs
set shiftwidth=4
set softtabstop=4
set tabstop=8

" Invisible characters
set list listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮
set showbreak=↪

" Virtual edit (awesome)
set virtualedit=all

" Explicit FTW
set autoindent
set smartindent
set wrap

" ---------------------------------------------------------------- }}}

" Searching ------------------------------------------------------ {{{

" Ignore case
set ignorecase

" Try to be smart about cases
set smartcase

" Highlight results (but don't show immediately)
set hlsearch
nohlsearch

" Makes search act like in modern browsers
set incsearch

" ---------------------------------------------------------------- }}}

" Colors and Fonts ----------------------------------------------- {{{

" Colorscheme setup
if has("gui_running")
    set background=light
else
    set background=dark
    let s:nb_colors = 256
    let g:solarized_termcolors = s:nb_colors
    execute 'set t_Co=' . s:nb_colors
    unlet s:nb_colors
endif

" Colorscheme : [Solarized](http://ethanschoonover.com/solarized)
colorscheme solarized

" Editing font
set guifont=Monospace\ 11

" Set extra options when running in GUI mode
if has("gui_running")
    set guitablabel=%M\ %t
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=m
    set guioptions-=T
    set guioptions+=e
elseif has("terminfo")
    let g:CommandTCancelMap=['<ESC>','<C-c>']
    set t_Sf=<Esc>[3%p1%dm
    set t_Sb=<Esc>[4%p1%dm
else
    set t_Sf=<Esc>[3%dm
    set t_Sb=<Esc>[4%dm
endif

" ---------------------------------------------------------------- }}}

" Moving around, tabs, windows and buffers ----------------------- {{{

" A buffer becomes hidden when it is abandoned
set hidden

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab,newtab

" Tab display
set showtabline=0

" Split towards the right
set splitright

if has("autocmd")
    " Return to last edit position when opening files
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \     exe "normal! g`\"" |
                \ endif

    let s:autocd = 0 " boolean indicating if should cd with current file

    " Cd directory when opening files
    if exists("s:autocd") && s:autocd != 0
        if exists("+autochdir")
            set autochdir
        else
            autocmd BufEnter * execute "chdir " . escape(expand("%:p:h"), ' ')
        endif
    endif
endif

" ---------------------------------------------------------------- }}}

" Keymappings ---------------------------------------------------- {{{

" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

" Switch buffers quickly
nmap <silent> <leader>n :bnext<cr>
nmap <silent> <leader>N :bprevious<cr>

" Open last (alternative) buffer
nmap <leader>a <C-^>

" Go to the 80th column
nnoremap <bar><bar> 80<bar>

" Move between windows using CTRL+[hjkl]
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move a line of text using ALT+[jk]
nnoremap <silent> <M-j> :move .+1<cr>==
nnoremap <silent> <M-k> :move .-2<cr>==
inoremap <silent> <M-j> <Esc>:move .+1<cr>==gi
inoremap <silent> <M-k> <Esc>:move .-2<cr>==gi
vnoremap <silent> <M-j> :move '>+1<cr>gv=gv
vnoremap <silent> <M-k> :move '<-2<cr>gv=gv

" Toggle invisibles display
nmap <silent> <leader>i :set list!<cr>

" Disable search highlighting
nmap <silent> <leader><cr> :nohlsearch<cr>

" Quick search-replace
nnoremap <leader>s :%s/\v<<C-r><C-w>>//gI<left><left><left>

" Remap Vim 0 to first non-blank character
nmap 0 ^

" Quick indenting in normal node
nmap <tab> ==

" Quick surround character with spaces 
nmap <leader><space> i<space><esc>la<space><esc>h

" Exchange "`" and "'"
nnoremap ' `
nnoremap ` '

" Resolve inconsistency between "Y" (line), and "D" (eol)
"nmap D dd
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Move between methods
nmap <leader>j ]m
nmap <leader>k [m

" Quick mapping for IDE-style completion
inoremap <nul> <C-x><C-o>

" Fast saving
nnoremap <silent> <leader>w :write<cr>

" Close current file
nnoremap <silent> <leader>q :quit<cr>

" CD file's directory
nmap <silent> <leader>cd :cd %:p:h<cr>

" Edit vimrc configuration
nmap <silent> <leader>co :edit $MYVIMRC<cr>

" Source this file
nmap <silent> <leader>so :source $MYVIMRC<cr>

" Quick make command
nmap <silent> <leader>m :make<cr>

" ---------------------------------------------------------------- }}}

" Filetype settings ---------------------------------------------- {{{

if has("autocmd")
    " Vimrc
    autocmd BufNewFile,BufRead,BufEnter *vimrc setlocal foldmethod=marker

    " Makefile
    autocmd FileType make setlocal noexpandtab

    " Bash's vi-edition-mode "v" command editor window
    autocmd BufRead,BufNewFile bash-fc-* set filetype=sh

    " C / C++
    autocmd BufNewFile,BufRead,BufEnter *.hpp set filetype=cpp

    " JSON / JavaScript
    autocmd BufNewFile,BufRead *.json set filetype=javascript

    " Pascal
    autocmd BufNewFile,BufRead *.pas,*.PAS set filetype=pascal

    " Go
    autocmd BufNewFile,BufRead *.go set filetype=go

    " Markdown
    autocmd BufNewFile,BufRead *.md set filetype=markdown

    " Python
    autocmd BufWritePre *.py :%substitute/\v\s+$//ge
endif

" ---------------------------------------------------------------- }}}

" Plugin customization ------------------------------------------- {{{

" FuzzyFinder
let g:fuf_modesDisable = []
let g:fuf_mrufile_maxItem = 400
let g:fuf_mrucmd_maxItem = 400

" Recursively search any file (slow)
nnoremap <silent> ss     :FufFile **/<cr>

" File
nnoremap <silent> sk     :FufFileWithCurrentBufferDir<cr>
nnoremap <silent> sK     :FufFileWithFullCwd<cr>
nnoremap <silent> s<C-k> :FufFile<cr>

" Directory
nnoremap <silent> sd     :FufDirWithCurrentBufferDir<cr>
nnoremap <silent> sD     :FufDirWithFullCwd<cr>
nnoremap <silent> s<C-d> :FufDir<cr>

" MRU (most recently used)
nnoremap <silent> sn     :FufMruFile<cr>
nnoremap <silent> sN     :FufMruFileInCwd<cr>
nnoremap <silent> sm     :FufMruCmd<cr>
nnoremap <silent> sM     :FufMruCmd!<cr>

" Buffer/Buffer search
nnoremap <silent> sj     :FufBuffer<cr>
nnoremap <silent> s,     :FufBufferTag<cr>
nnoremap <silent> s?     :FufBufferTag!<cr>
nnoremap <silent> s;     :FufBufferTagAll<cr>
nnoremap <silent> s.     :FufBufferTagAll!<cr>
nnoremap <silent> s}     :FufBufferTagWithCursorWord!<cr>
nnoremap <silent> s]     :FufBufferTagAllWithCursorWord!<cr>

" Visual mode mappings (with selected text), notice how
" these are switched for uppercase/lowercase convetion,
" since it is pretty obvious we don't want to do fuzzy
" searching when we have already selected the text to search
vnoremap <silent> s,     :FufBufferTagWithSelectedText!<cr>
vnoremap <silent> s?     :FufBufferTagWithSelectedText<cr>
vnoremap <silent> s;     :FufBufferTagAllWithSelectedText!<cr>
vnoremap <silent> s.     :FufBufferTagAllWithSelectedText<cr>

" Various with fuzzy/partial for lowercase/uppercase key
nnoremap <silent> st     :FufTag<cr>
nnoremap <silent> sT     :FufTag!<cr>
nnoremap <silent> s<C-t> :FufTagWithCursorWord!<cr>
nnoremap <silent> sh     :FufHelp<cr>
nnoremap <silent> sH     :FufHelp!<cr>
nnoremap <silent> sy     :FufLine<cr>
nnoremap <silent> sY     :FufLine!<cr>
nnoremap <silent> so     :FufJumpList<cr>
nnoremap <silent> sO     :FufJumpList!<cr>
nnoremap <silent> sq     :FufQuickfix<cr>
nnoremap <silent> sQ     :FufQuickfix!<cr>
nnoremap <silent> sg     :FufTaggedFile<cr>
nnoremap <silent> sG     :FufTaggedFile!<cr>
nnoremap <silent> sp     :FufChangeList<cr>
nnoremap <silent> sP     :FufChangeList!<cr>

" Unused but recommended mappings
"nnoremap <silent> sl     :FufCoverageFileChange<cr>
"nnoremap <silent> sL     :FufCoverageFileChange!<cr>
"nnoremap <silent> s<C-l> :FufCoverageFileRegister<cr>
"nnoremap <silent> su     :FufBookmarkFile<cr>
"nnoremap <silent> s<C-u> :FufBookmarkFileAdd<cr>
"vnoremap <silent> s<C-u> :FufBookmarkFileAddAsSelectedText<cr>
"nnoremap <silent> si     :FufBookmarkDir<cr>
"nnoremap <silent> s<C-i> :FufBookmarkDirAdd<cr>

" Helpful specific commands
nnoremap <silent> se     :FufEditDataFile<cr>
nnoremap <silent> sr     :FufRenewCache<cr>

" Fix for hesitation
nnoremap s <nop>
vnoremap s <nop>

" Snipmate
let g:snips_author = 'Jean-Marie Comets'

" Fugitive
command! Gpush :Git push
command! Gpull :Git pull

" ---------------------------------------------------------------- }}}
