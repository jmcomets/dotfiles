" Summary -------------------------------------------------------- {{{
"
" Author: Jean-Marie Comets <jean.marie.comets@gmail.com>
"
" Version: 2.6 - 25/06/2013
"
" Sections:
"   - Basics
"   - Vim user interface
"   - Syntax related
"   - Text, tab and indent related
"   - Searching
"   - Colors and Fonts
"   - Moving around
"   - Keymappings
"   - Autocommands
"   - Plugin customization
"
" ---------------------------------------------------------------- }}}

" Basics --------------------------------------------------------- {{{

" Sets how many lines of history Vim has to remember
set history=1000

" Reload buffer when its file is changed from the outside
set autoread

" Mapleader is "," (consider someday removing this)
let mapleader = ","

" Set UTF8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set fileformats=unix,dos,mac

" Disable backup/swap
set nobackup
set nowritebackup
set noswapfile

" The "m" at the end of Vi
set nocompatible

" Add "$" at end of "change" nouns
set cpoptions+=$

" Set extra options when running in GUI mode
if has("gui_running")
    set guitablabel=%M\ %t
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L
    set guioptions-=m
    set guioptions-=T
    set guioptions+=e
endif

" Remove startup message
set shortmess+=I

" Start Pathogen plugin to load bundle
call pathogen#infect()
call pathogen#helptags()

" Enable plugins
filetype plugin indent on

" Don't redraw while executing macros (good performance config)
set lazyredraw

" ---------------------------------------------------------------- }}}

" Vim user interface --------------------------------------------- {{{

" Title is name of current file
set title

" Set amount of lines above the cursor
set scrolloff=3

" Show line numbers
set number

" Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" Always put a status line in, even if there is only one window
set laststatus=2

" Status line (if Fugitive, with Git extra)
silent! call fugitive#statusline()
set statusline=%F%m\ [%{&ff}]%y%r
set statusline+=%{exists('*fugitive#statusline')?fugitive#statusline():''}
set statusline+=[%l,%v][%p%%][\%03.b]

" Turn on the Wild menu
set wildmenu

" Behave shell-like when completing shell
set wildmode=longest,list

" Ignore compiled files and backups
set wildignore=*.o,*~,*.pyc,*.gch

" Virtual edit (awesome)
set virtualedit=all

" Backspace unindents and joins lines
set backspace=start,indent,eol
"set whichwrap+=<,>,h,l " disabled since virtualedit

" Don't notify any errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Hide the mouse pointer while typing
set mousehide

" Mouse activated ?
set mouse=

" ---------------------------------------------------------------- }}}

" Syntax related ------------------------------------------------- {{{

" Enable syntax highlighting
syntax enable

" Enable modeline
set modeline

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set matchtime=2

" Default fold method
set foldmethod=indent

" Max number of fold levels
set foldnestmax=10

" Folding everything (disable at start)
set nofoldenable

" Again, folding parent levels
set foldlevel=1

" Tags (go up directories and collect "tags" files)
set tags=./tags;/

" Default complete function
set omnifunc=syntaxcomplete#Complete

" Complete menu
set completeopt=menuone,preview

" Add "/usr/local/include" to path when running Unix
if has("unix")
    set path+=/usr/local/include
endif

" ---------------------------------------------------------------- }}}

" Text, tab and indent related ----------------------------------- {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Indent by 4 spaces, 8 for tabs
set shiftwidth=4
set softtabstop=4
set tabstop=8

" Invisible characters
set list listchars=tab:▸\ ,trail:⋅,extends:❯,precedes:❮
set showbreak=↪

" Explicit FTW
set autoindent
set smartindent
set wrap

" ---------------------------------------------------------------- }}}

" Searching ------------------------------------------------------ {{{

" Regex magic
set magic

" Ignore case
set ignorecase

" Try to be smart about cases
set smartcase

" Highlight results (but don't show immediately)
set hlsearch
nohlsearch

" Makes search act like in modern browsers
set incsearch

" ---------------------------------------------------------------- }}}

" Colors and Fonts ----------------------------------------------- {{{

" Colorscheme setup
set background=dark
if !has("gui_running")
    let s:nb_colors = system('tput colors')
    execute 'set t_Co=' . s:nb_colors
    let g:solarized_termcolors = s:nb_colors
    unlet s:nb_colors
endif
colorscheme solarized

" Editing font
set guifont=Monospace\ 11

" In terminal, the "escape" also acts as Ctrl-C
if has("terminfo")
    let g:CommandTCancelMap = ['<esc>', '<C-c>']
endif

" ---------------------------------------------------------------- }}}

" Moving around -------------------------------------------------- {{{

" A buffer becomes hidden when it is abandoned
set hidden

" Specify the behavior when switching between buffers
set switchbuf=useopen,usetab

" Tab display
set showtabline=0

" Split towards the right
set splitright

" ---------------------------------------------------------------- }}}

" Keymappings ---------------------------------------------------- {{{

" Treat long lines as break lines (useful when moving around in them)
nnoremap j gj
nnoremap k gk

" Switch buffers quickly
nmap <silent> <leader>n :bnext<cr>
nmap <silent> <leader>N :bprevious<cr>

" Open last (alternative) buffer
nmap <leader>a <C-^>

" Go to the 80th column
nmap <bar><bar> 80<bar>

" Move a line of text using ALT+[jk]
nmap <silent> <M-j> :move .+1<cr>==
nmap <silent> <M-k> :move .-2<cr>==
imap <silent> <M-j> <esc>:move .+1<cr>==gi
imap <silent> <M-k> <esc>:move .-2<cr>==gi
vmap <silent> <M-j> :move '>+1<cr>gv=gv
vmap <silent> <M-k> :move '<-2<cr>gv=gv

" Disable search highlighting
nmap <silent> <leader><cr> :nohlsearch<cr>

" Search-replace current word
nmap <leader>r :%s/\v<<C-r><C-w>>//gI<left><left><left>

" Remap Vim 0 to first non-blank character
nmap 0 ^

" Quick indenting in normal node
nmap <tab> ==

" Exchange "`" and "'"
nnoremap ' `
nnoremap ` '

" Resolve inconsistency between "Y" (line), and "D" (eol)
"nmap D dd
nmap Y y$

" Visual block indenting: keep selection after indenting
vmap > >gv
vmap < <gv

" Enable IDE-style completion
imap <nul> <C-x><C-o>

" Fast saving
nmap <silent> <leader>w :write<cr>

" Close current window
nmap <silent> <leader>q :quit<cr>

" Edit/source vimrc
nmap <silent> <leader>co :edit $MYVIMRC<cr>
nmap <silent> <leader>so :source $MYVIMRC<cr>

" Run "make" (makeprg)
nmap <silent> <leader>m :make<cr>

" ---------------------------------------------------------------- }}}

" Autocommands --------------------------------------------------- {{{

if has("autocmd")
    augroup vimrc_autocommands
        " Remove all previous autocommands from this group
        autocmd!

        " Return to last edit position when opening files
        autocmd BufReadPost *
                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
                    \     execute "normal! g`\"" |
                    \ endif

        let s:autocd = 0 " boolean indicating if should cd with current file

        " Cd directory when opening files
        if exists("s:autocd") && s:autocd != 0
            if exists("+autochdir")
                set autochdir
            else
                autocmd BufEnter *
                            \ execute "chdir " . escape(expand("%:p:h"), ' ')
            endif
        endif
        " Vimrc
        autocmd BufNewFile,BufRead,BufEnter *vimrc setlocal foldmethod=marker

        " Makefile
        autocmd FileType make setlocal noexpandtab

        " Python
        autocmd BufWritePre *.py :%substitute/\v\s+$//ge
    augroup END
endif

" ---------------------------------------------------------------- }}}

" Plugin customization ------------------------------------------- {{{

" FuzzyFinder
let g:fuf_mrufile_maxItem = 400
let g:fuf_mrucmd_maxItem = 400

" Disable
let g:fuf_modesDisable = ['coveragefile', 'bookmarkfile', 'bookmarkdir']

" Recursively search any file (slow)
nmap <silent> ss     :FufFile **/<cr>

" File
nmap <silent> sk     :FufFileWithCurrentBufferDir<cr>
nmap <silent> sK     :FufFileWithFullCwd<cr>
nmap <silent> s<C-k> :FufFile<cr>

" Directory
nmap <silent> sd     :FufDirWithCurrentBufferDir<cr>
nmap <silent> sD     :FufDirWithFullCwd<cr>
nmap <silent> s<C-d> :FufDir<cr>

" MRU (most recently used)
nmap <silent> sn     :FufMruFile<cr>
nmap <silent> sN     :FufMruFileInCwd<cr>
nmap <silent> sm     :FufMruCmd<cr>
nmap <silent> sM     :FufMruCmd!<cr>

" Buffer/Buffer search
nmap <silent> sj     :FufBuffer<cr>
nmap <silent> s,     :FufBufferTag<cr>
nmap <silent> s?     :FufBufferTag!<cr>
nmap <silent> s;     :FufBufferTagAll<cr>
nmap <silent> s.     :FufBufferTagAll!<cr>
nmap <silent> s}     :FufBufferTagWithCursorWord!<cr>
nmap <silent> s]     :FufBufferTagAllWithCursorWord!<cr>

" Visual mode mappings (with selected text), notice how
" these are switched for uppercase/lowercase convetion,
" since it is pretty obvious we don't want to do fuzzy
" searching when we have already selected the text to search
vmap <silent> s,     :FufBufferTagWithSelectedText!<cr>
vmap <silent> s?     :FufBufferTagWithSelectedText<cr>
vmap <silent> s;     :FufBufferTagAllWithSelectedText!<cr>
vmap <silent> s.     :FufBufferTagAllWithSelectedText<cr>

" Various with fuzzy/partial for lowercase/uppercase key
nmap <silent> st     :FufTag<cr>
nmap <silent> sT     :FufTag!<cr>
nmap <silent> s<C-t> :FufTagWithCursorWord!<cr>
nmap <silent> sh     :FufHelp<cr>
nmap <silent> sH     :FufHelp!<cr>
nmap <silent> sy     :FufLine<cr>
nmap <silent> sY     :FufLine!<cr>
nmap <silent> so     :FufJumpList<cr>
nmap <silent> sO     :FufJumpList!<cr>
nmap <silent> sq     :FufQuickfix<cr>
nmap <silent> sQ     :FufQuickfix!<cr>
nmap <silent> sg     :FufTaggedFile<cr>
nmap <silent> sG     :FufTaggedFile!<cr>
nmap <silent> sp     :FufChangeList<cr>
nmap <silent> sP     :FufChangeList!<cr>

" Helpful specific commands
nmap <silent> se     :FufEditDataFile<cr>
nmap <silent> sr     :FufRenewCache<cr>

" Fix for hesitation
nmap s <nop>
vmap s <nop>

" Switch
nmap <silent> <leader>s :Switch<cr>

" ---------------------------------------------------------------- }}}
